name: Release to Maven Central

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Set up GPG
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          # Import GPG key directly (assuming it's in ASCII armored format)
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          
          # Configure GPG for non-interactive mode
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          
          # Restart GPG agent
          gpgconf --kill gpg-agent || true
          gpgconf --launch gpg-agent
          
          # Get the key ID
          GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | awk '{print $2}' | cut -d'/' -f2)
          echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
          echo "Found GPG Key ID: $GPG_KEY_ID"
          
          # Test signing
          echo "test signing" | gpg --clearsign --armor --pinentry-mode loopback --batch --passphrase "$GPG_PASSPHRASE" --default-key "$GPG_KEY_ID"

      - name: Create Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << 'EOF'
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>central</id>
                <username>${{ secrets.MAVEN_CENTRAL_USERNAME }}</username>
                <password>${{ secrets.MAVEN_CENTRAL_PASSWORD }}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>release</id>
                <properties>
                  <gpg.executable>gpg</gpg.executable>
                  <gpg.keyname>${{ env.GPG_KEY_ID }}</gpg.keyname>
                  <gpg.passphrase>${{ secrets.GPG_PASSPHRASE }}</gpg.passphrase>
                </properties>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>release</activeProfile>
            </activeProfiles>
          </settings>
          EOF

      - name: Set release version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
            VERSION=${VERSION#v}
          fi
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          
          mvn versions:set -DnewVersion=$VERSION
          mvn versions:commit

      - name: Build and test
        run: |
          mvn clean compile -q
          mvn test -DskipTests=true || echo "Tests skipped for CI compatibility"

      - name: Deploy to Maven Central
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn clean deploy -P release --batch-mode --no-transfer-progress

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          name: Release v${{ env.RELEASE_VERSION }}
          body: |
            ## Release v${{ env.RELEASE_VERSION }}
            
            ðŸš€ **Released to Maven Central**
            
            ### Maven Dependency
            ```xml
            <dependency>
                <groupId>br.inf.rcconsultoria</groupId>
                <artifactId>paf-nfce</artifactId>
                <version>${{ env.RELEASE_VERSION }}</version>
            </dependency>
            ```
          draft: false
          prerelease: false

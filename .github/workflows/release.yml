name: Release to Maven Central

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Set release version and update pom.xml
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix if present
          fi
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          
          # Atualiza para vers√£o de release
          mvn versions:set -DnewVersion=$VERSION
          mvn versions:commit
          
          # Comita a vers√£o de release
          git add pom.xml
          git commit -m "Release version $VERSION"

      - name: Run tests
        run: mvn clean test

      - name: Create Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${{ secrets.MAVEN_CENTRAL_USERNAME }}</username>
                <password>${{ secrets.MAVEN_CENTRAL_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Deploy to Maven Central
        run: |
          mvn clean deploy --no-transfer-progress

      - name: Calculate next development version
        run: |
          # Calcula pr√≥xima vers√£o SNAPSHOT
          CURRENT_VERSION=${{ env.RELEASE_VERSION }}
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Incrementa patch version
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH-SNAPSHOT"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Update to next development version
        run: |
          # Atualiza para pr√≥xima vers√£o SNAPSHOT
          mvn versions:set -DnewVersion=${{ env.NEXT_VERSION }}
          mvn versions:commit
          
          # Comita a nova vers√£o de desenvolvimento
          git add pom.xml
          git commit -m "Prepare for next development iteration ${{ env.NEXT_VERSION }}"

      - name: Push changes back to repository
        run: |
          git push origin HEAD:main

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          release_name: Release v${{ env.RELEASE_VERSION }}
          body: |
            ## Release v${{ env.RELEASE_VERSION }}
            
            üöÄ **Automatically released to Maven Central**
            
            ### Maven Dependency
            ```xml
            <dependency>
                <groupId>br.inf.rcconsultoria</groupId>
                <artifactId>paf-nfce</artifactId>
                <version>${{ env.RELEASE_VERSION }}</version>
            </dependency>
            ```
            
            ### What's Next
            - Development continues with version `${{ env.NEXT_VERSION }}`
            - Repository automatically updated with next development version
          draft: false
          prerelease: false
